function [y1] = myNeuralNetworkFunction1e7(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 26-May-2017 20:31:59.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 6xQ matrix, input #1
% and returns:
%   y = 2xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;-0.000920965452678502;2185115.5;0.905564278364182;1216715367.40488;11.7400503158569];
x1_step1.gain = [80.4836403902851;122.387115345427;6.29630737313334e-06;3.14684955684987;2.64972224814432e-09;1.83568766335736];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.3799190434788930482;-2.9063790329588048422;1.8648739669366842797;-2.3212244013394838227;2.345049041172121651;1.5752511113494485073;1.3297614521900342766;-0.55029034612980198826;0.24220831717044200015;-0.8323572403091668015;1.3124745474645509447;1.1205287487386381695;-6.9952871580612967506;-1.07699441433990728;23.743102090445045604;-1.4119696078403956019;-2.7231938106198745331;-1.7517743628448076976;-2.7196250351362034614;3.1874253937393737246];
IW1_1 = [0.86963283876135977213 1.4698252362194790255 -0.1144521234343669619 0.71793610082548464657 -0.77347213294296013331 1.202236445137326637;0.81830286134282981259 -0.51760478991335079346 -0.9298123358845906683 -1.205751998916099188 -1.4705350720775907103 -0.066197383972164708377;-0.48610542980047710682 -1.9456303280480242712 -0.63664965390965988501 -0.12473143912527880073 -0.49972588516717086904 -0.84549439157371619746;1.1353283463730339253 -0.29363983249998709679 -0.95112027776739038742 1.5554117119576289507 0.074739881068930535957 0.37300657844535423102;-0.11850096040411466081 0.6769576382956506988 1.6324337630328562554 -0.025505327315270585192 0.092432701215981322163 -0.50904929262760489905;-1.267884123666961349 -0.0012828380104805759462 2.8051221681434439503 0.21374263071246052403 1.7805692496389917689 0.026803826435351705421;-0.99605147579080377529 -1.5841232117646915079 0.37979902863483011588 -0.42655836854493578425 -1.0198552493166435085 0.60325773263769755239;-0.36129432712205017397 0.36068495920076709682 -3.431185023442392179 0.22462398143195394518 1.1020419225142781272 -0.91455217017922663114;-0.60509441439126510076 -1.3166816422762970262 1.7834632643079217917 1.3859272682205525662 -1.8389836155510177473 0.83397254015022348472;-6.3439256360994704664 5.9032236204347796615 -5.124154594948103103 1.0879875059956920502 1.984454486755864 0.52069590561335443724;1.4205428031234359487 0.036150967832601271779 -0.568574551392016736 -1.8096889051145486071 -0.28705536984658697186 -0.38796185426369222959;3.6141136124122881235 -0.13401759846763655615 0.13299159564463061689 1.5274481453004598031 3.017185986754173932 0.54990249445869920919;-7.4227634435889848774 0.53882031235841043593 -2.4504377839377582404 0.49442572210809004885 -0.90989078698326952832 0.28459928248468507883;-1.4795289271561005151 1.0080986432004734876 -0.4976976203189695247 0.30232811262505332461 -1.5697732595452278392 0.2460091420971794729;24.391730696237821974 -0.89588443250653360117 2.0366056953467523982 -4.4022790546465104811 3.9456924486052442624 -0.023645232076706643176;-0.36841519585200122044 0.24110593848919029125 -2.0611089400662314652 0.19354562959644500131 1.047593819423534578 1.4225519353419462387;-1.271900673774941426 2.4515186931751284938 3.8803048236457420295 2.4355045337132428251 0.94719458178571547258 -0.1462456058981579099;-0.94762428470655790669 -1.6410864791798371876 -6.8082995649983546471 1.2681252625919667842 3.618915166667976635 0.77336574546146086284;0.39451858172950104997 1.1453875056512523578 -2.6531364331128148848 -1.4564624110099897436 -0.28416214966457037372 -0.34641728152715578481;2.1120476790654092447 0.9778417444194128505 -0.073374683552098390882 -1.692385114806083557 -0.60239296224917437961 -0.64197510134258883863];

% Layer 2
b2 = [-0.97582540452955457422;1.5248221323232109548];
LW2_1 = [1.8844247807706500097 1.5459035957493054703 -1.4783851794073592512 0.79477104894214467556 -0.090595924804986058265 -2.3625745956713850582 -1.4287155649516531941 0.27192371108162344262 0.89063162983680810303 -3.4098101106575877672 -2.178840733307301214 0.44282988131431311185 3.2129065003852010918 -0.39373402660784301288 13.06078929576800185 0.98072004190541861579 -1.2150447661613688055 1.649350329788067171 2.4040859598890471638 1.1765832124950466042;-2.4985904076229958903 -2.1801859121442626055 0.99498699847419169728 -2.3429856998729885476 0.7692681913522817494 1.4139062035138738604 -0.064661186291998434816 -1.5331641635206205709 -2.0877823739909291412 3.7012343783412520182 1.7289508847940195935 -1.6430936802808722152 -3.1558654375912165158 0.92271202679280484027 -11.870872998420971101 0.38972945202991748914 1.0233231390573023223 -3.0298954473595030024 -1.0573363956341095271 -1.6262447301869924488];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);

% Output 1
y1 = a2;
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
else
    a = iSoftmaxApplyCPU(n);
end
end
function a = iSoftmaxApplyCPU(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numerator = exp(n);
denominator = sum(numerator,1);
denominator(denominator == 0) = 1;
a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
nmax = max(n,[],1);
numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
denominator = sum(numerator,1);
a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
if (denominator == 0)
    a = numerator;
else
    a = numerator ./ denominator;
end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
